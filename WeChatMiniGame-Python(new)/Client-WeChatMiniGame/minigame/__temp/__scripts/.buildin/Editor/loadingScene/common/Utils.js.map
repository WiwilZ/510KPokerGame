{"version":3,"sources":[".buildin/Editor/loadingScene/common/Utils.ts"],"names":[],"mappings":";;AAEA;IAAA;IAqCA,CAAC;IAnCe,oBAAc,GAA5B,UAA6B,MAAqB,EAAE,IAAY;QAC9D,IAAM,aAAa,GAAG,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC;QACvD,IAAM,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC;QAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,EAAE,EAAE;YACtC,IAAI,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YAChC,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,EAAE;gBACvB,OAAO,KAAK,CAAC;aACd;SACF;QACD,IAAI,MAAM,GAAG,IAAI,CAAA;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,EAAE,EAAE;YACtC,IAAI,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YAChC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;SAC1C;QACD,OAAO,MAAM,CAAA;IACf,CAAC;IAEa,WAAK,GAAnB,UAAoB,KAAa,EAAE,GAAW,EAAE,GAAW;QACzD,IAAI,KAAK,GAAG,GAAG;YACb,KAAK,GAAG,GAAG,CAAC;aACT,IAAI,KAAK,GAAG,GAAG;YAClB,KAAK,GAAG,GAAG,CAAC;QACd,OAAO,KAAK,CAAC;IACf,CAAC;IAEa,aAAO,GAArB,UAAsB,KAAa;QACjC,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;YAChB,KAAK,GAAG,CAAC,CAAC;SACX;aAAM,IAAI,KAAK,GAAG,CAAC,EAAE;YACpB,KAAK,GAAG,CAAC,CAAC;SACX;aAAM,IAAI,KAAK,GAAG,CAAC,EAAE;YACpB,KAAK,GAAG,CAAC,CAAC;SACX;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACH,YAAC;AAAD,CArCA,AAqCC,IAAA","file":"Utils.js","sourcesContent":["import engine from 'engine'\n\nexport default class Utils {\n\n  public static getChildByName(entity: engine.Entity, name: string): engine.Entity {\n    const childrenCount = entity.transform2D.childrenCount;\n    const childList = entity.transform2D.children;\n    for (let i = 0; i < childrenCount; i++) {\n      let child = childList[i].entity;\n      if (child.name === name) {\n        return child;\n      }\n    }\n    let result = null\n    for (let i = 0; i < childrenCount; i++) {\n      let child = childList[i].entity;\n      result = this.getChildByName(child, name)\n    }\n    return result\n  }\n\n  public static clamp(value: number, min: number, max: number): number {\n    if (value < min)\n      value = min;\n    else if (value > max)\n      value = max;\n    return value;\n  }\n\n  public static clamp01(value: number): number {\n    if (isNaN(value)) {\n      value = 0;\n    } else if (value > 1) {\n      value = 1;\n    } else if (value < 0) {\n      value = 0;\n    }\n    return value;\n  }\n}"]}