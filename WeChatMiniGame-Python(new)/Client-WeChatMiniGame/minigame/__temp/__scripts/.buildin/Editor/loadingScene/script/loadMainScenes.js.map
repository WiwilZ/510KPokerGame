{"version":3,"sources":[".buildin/Editor/loadingScene/script/loadMainScenes.ts"],"names":[],"mappings":";;;AAAA,sEAAgE;AAEhE,iCAA4B;AAE5B,IAAK,WAIJ;AAJD,WAAK,WAAW;IACd,mDAAO,CAAA;IACP,mDAAO,CAAA;IACP,6CAAI,CAAA;AACN,CAAC,EAJI,WAAW,KAAX,WAAW,QAIf;AAGD;IAA4C,0CAAa;IAAzD;QAAA,qEAmHC;QA1GQ,aAAO,GAAW,CAAC,CAAA;QAEnB,mBAAa,GAAY,KAAK,CAAA;QAG7B,0BAAoB,GAAgB,WAAW,CAAC,OAAO,CAAA;QACvD,0BAAoB,GAAgB,WAAW,CAAC,OAAO,CAAA;;IAoGjE,CAAC;IAhGc,gCAAO,GAApB;;;gBACE,IAAI,CAAC,aAAa,EAAE,CAAA;;;;KACrB;IAEM,sCAAa,GAApB;QAAA,iBAmCC;QAjCC,IAAM,cAAc,GAAG,UAAU,CAAC,gBAAgB,CAAA;QAElD,IAAM,cAAc,GAAG,UAAU,CAAC,gBAAgB,CAAA;QAElD,IAAI,CAAC,cAAc,EAAE;YACnB,IAAI,CAAC,oBAAoB,GAAG,WAAW,CAAC,OAAO,CAAA;SAChD;aAAM,IAAI,IAAI,CAAC,oBAAoB,KAAK,WAAW,CAAC,OAAO,EAAE;YAC5D,IAAI,CAAC,IAAI,GAAG,gBAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;YAC9C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAC,YAAY;gBAClC,KAAI,CAAC,WAAW,GAAG,YAA4B,CAAA;gBAC/C,KAAI,CAAC,oBAAoB,GAAG,WAAW,CAAC,OAAO,CAAA;gBAC/C,KAAI,CAAC,WAAW,EAAE,CAAA;YACpB,CAAC,EAAE;gBACD,KAAI,CAAC,oBAAoB,GAAG,WAAW,CAAC,IAAI,CAAA;gBAC5C,KAAI,CAAC,WAAW,EAAE,CAAA;YACpB,CAAC,CAAC,CAAA;SACH;QAED,IAAI,CAAC,cAAc,EAAE;YACnB,IAAI,CAAC,oBAAoB,GAAG,WAAW,CAAC,OAAO,CAAA;SAChD;aAAM,IAAI,IAAI,CAAC,oBAAoB,KAAK,WAAW,CAAC,OAAO,EAAE;YAC5D,IAAI,CAAC,IAAI,GAAG,gBAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;YAC9C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAC,YAAY;gBAClC,KAAI,CAAC,WAAW,GAAG,YAA4B,CAAA;gBAC/C,KAAI,CAAC,oBAAoB,GAAG,WAAW,CAAC,OAAO,CAAA;gBAC/C,KAAI,CAAC,WAAW,EAAE,CAAA;YACpB,CAAC,EAAE;gBACD,KAAI,CAAC,oBAAoB,GAAG,WAAW,CAAC,IAAI,CAAA;gBAC5C,KAAI,CAAC,WAAW,EAAE,CAAA;YACpB,CAAC,CAAC,CAAA;SACH;QAED,IAAI,CAAC,WAAW,EAAE,CAAA;IACpB,CAAC;IAEO,oCAAW,GAAnB;QACE,IAAI,IAAI,CAAC,oBAAoB,KAAK,WAAW,CAAC,OAAO,IAAI,IAAI,CAAC,oBAAoB,KAAK,WAAW,CAAC,OAAO,EAAE;YAC1G,OAAM;SACP;QACD,IAAI,IAAI,CAAC,oBAAoB,KAAK,WAAW,CAAC,IAAI,IAAI,IAAI,CAAC,oBAAoB,KAAK,WAAW,CAAC,IAAI,EAAE;YACpG,IAAI,CAAC,KAAK,EAAE,CAAA;YACZ,OAAM;SACP;QACD,gBAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;QAClC,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,gBAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;SACxC;QACD,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,gBAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;SACxC;IACH,CAAC;IAEM,8BAAK,GAAZ;QACE,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAA;SAC5B;IACH,CAAC;IAEM,qCAAY,GAAnB;QACE,IAAI,CAAC,aAAa,EAAE,CAAA;IACtB,CAAC;IAEM,iCAAQ,GAAf,UAAgB,EAAE;QAIhB,IAAI,KAAK,GAAG,CAAC,CAAA;QACb,IAAI,KAAK,GAAG,CAAC,CAAA;QACb,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,KAAK,GAAG,CAAC,CAAA;SACV;aAAM;YACL,IAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAA;YAC5B,KAAK,GAAG,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,CAAA;SAC5B;QAED,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,KAAK,GAAG,CAAC,CAAA;SACV;aAAM;YACL,IAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAA;YAC5B,KAAK,GAAG,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,CAAA;SAC5B;QAED,IAAI,CAAC,OAAO,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,CAAA;QAC1C,IAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAgB,uBAAa,CAAC,CAAA;QACtE,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAA;IAC9B,CAAC;IAEM,kCAAS,GAAhB;IAEA,CAAC;IA9GD;QAHC,gBAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;YAC1B,IAAI,EAAE,gBAAM,CAAC,WAAW;SACzB,CAAC;oDACiC;IAKnC;QAHC,gBAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;YAC1B,IAAI,EAAE,gBAAM,CAAC,SAAS,CAAC,MAAM;SAC9B,CAAC;mDACwB;IATP,cAAc;QADlC,gBAAM,CAAC,UAAU,CAAC,SAAS,CAAC,gBAAgB,CAAC;OACzB,cAAc,CAmHlC;IAAD,qBAAC;CAnHD,AAmHC,CAnH2C,gBAAM,CAAC,MAAM,GAmHxD;kBAnHoB,cAAc","file":"loadMainScenes.js","sourcesContent":["import UIProgressBar from '../progressbar/scripts/UIProgressBar'\nimport LoadTask from '!!Only Export Engine Module, Cant Use Internal Moduleï¼šengine/assets/load-task';\nimport engine from \"engine\";\n\nenum ELoadStatus {\n  loading,\n  success,\n  fail,\n}\n\n@engine.decorators.serialize(\"loadMainScenes\")\nexport default class loadMainScenes extends engine.Script {\n  @engine.decorators.property({\n    type: engine.Transform2D\n  })\n  public retryBtn: engine.Transform2D\n\n  @engine.decorators.property({\n    type: engine.TypeNames.String\n  })\n  public percent: number = 0\n\n  public finishLoading: boolean = false\n  private lt3d: LoadTask<unknown> | undefined\n  private lt2d: LoadTask<unknown> | undefined\n  private scene2dLoadingStatus: ELoadStatus = ELoadStatus.loading\n  private scene3dLoadingStatus: ELoadStatus = ELoadStatus.loading\n  private game2dScene: engine.Scene\n  private game3dScene: engine.Scene\n\n  public async onAwake() {\n    this.loadMainScene()\n  }\n\n  public loadMainScene() {\n    // @ts-ignore\n    const main3DsceneKey = GameGlobal.__main3DsceneKey\n    // @ts-ignore\n    const main2DsceneKey = GameGlobal.__main2DsceneKey\n\n    if (!main3DsceneKey) {\n      this.scene3dLoadingStatus = ELoadStatus.success\n    } else if (this.scene3dLoadingStatus !== ELoadStatus.success) {\n      this.lt3d = engine.loader.load(main3DsceneKey)\n      this.lt3d.promise.then((_game3dScene) => {\n        this.game3dScene = _game3dScene as engine.Scene\n        this.scene3dLoadingStatus = ELoadStatus.success\n        this.checkResult()\n      }, () => {\n        this.scene3dLoadingStatus = ELoadStatus.fail\n        this.checkResult()\n      })\n    }\n\n    if (!main2DsceneKey) {\n      this.scene2dLoadingStatus = ELoadStatus.success\n    } else if (this.scene2dLoadingStatus !== ELoadStatus.success) {\n      this.lt2d = engine.loader.load(main2DsceneKey)\n      this.lt2d.promise.then((_game2dScene) => {\n        this.game3dScene = _game2dScene as engine.Scene\n        this.scene2dLoadingStatus = ELoadStatus.success\n        this.checkResult()\n      }, () => {\n        this.scene2dLoadingStatus = ELoadStatus.fail\n        this.checkResult()\n      })\n    }\n\n    this.checkResult()\n  }\n\n  private checkResult() {\n    if (this.scene2dLoadingStatus === ELoadStatus.loading || this.scene3dLoadingStatus === ELoadStatus.loading) {\n      return\n    }\n    if (this.scene2dLoadingStatus === ELoadStatus.fail || this.scene3dLoadingStatus === ELoadStatus.fail) {\n      this.retry()\n      return\n    }\n    engine.game.clearScene(true, true)\n    if (this.game2dScene) {\n      engine.game.playScene(this.game2dScene)\n    }\n    if (this.game3dScene) {\n      engine.game.playScene(this.game3dScene)\n    }\n  }\n\n  public retry() {\n    if (this.retryBtn) {\n      this.retryBtn.active = true\n    }\n  }\n\n  public retryLoading() {\n    this.loadMainScene()\n  }\n\n  public onUpdate(dt) {\n    // if (this.scene2dLoadingStatus !== ELoadStatus.loading && this.scene3dLoadingStatus !== ELoadStatus.loading) {\n    //   return\n    // }\n    let lt2dv = 0\n    let lt3dv = 0\n    if (!this.lt2d) {\n      lt2dv = 1\n    } else {\n      const p = this.lt2d.progress\n      lt2dv = p.current / p.total\n    }\n\n    if (!this.lt3d) {\n      lt3dv = 1\n    } else {\n      const p = this.lt3d.progress\n      lt3dv = p.current / p.total\n    }\n\n    this.percent = (lt2dv + lt3dv) * 0.5 * 100\n    const barComp = this.entity.getComponent<UIProgressBar>(UIProgressBar)\n    barComp.value = this.percent\n  }\n\n  public onDestroy() {\n\n  }\n}\n"]}