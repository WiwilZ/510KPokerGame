{"version":3,"sources":["__temp/buildOnlyScriptProcess/inlineFunctionProcess/Scripts/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import engine from \"engine\";\r\nimport { databus } from \"./Databus\";\r\n\r\n\r\nclass LRUCache<K, V> {\r\n    private cache: Map<K, V>;\r\n\r\n    public constructor(private capacity: number) {\r\n        this.cache = new Map();\r\n    }\r\n\r\n    public get(key: K): V | undefined {\r\n        const val = this.cache.get(key);\r\n        if (val === undefined) return;\r\n\r\n        this.cache.delete(key);\r\n        this.cache.set(key, val);\r\n        return val;\r\n    }\r\n\r\n    public add(key: K, value: V): void {\r\n        if (this.cache.has(key)) {\r\n            this.cache.delete(key);\r\n        } else if (this.cache.size >= this.capacity) {\r\n            this.cache.delete(this.cache.keys().next().value);\r\n        }\r\n        this.cache.set(key, value);\r\n    }\r\n}\r\n\r\nconst spriteFrameCache = new LRUCache<string, engine.SpriteFrame>(10);\r\n\r\n\r\nexport function urlToSpriteFrame(url: string) {\r\n    return new Promise((resolve, reject) => {\r\n        const spriteFrame = spriteFrameCache.get(url);\r\n        if (spriteFrame) {\r\n            return resolve(spriteFrame);\r\n        }\r\n        const img = new engine.Image();\r\n        img.onerror = err => {\r\n            console.error(err);\r\n            reject();\r\n        };\r\n        img.onload = () => {\r\n            const texture = new engine.Texture2D();\r\n            if (texture.initWithImage(img)) {\r\n                const spriteFrame = engine.SpriteFrame.createFromTexture(texture);\r\n                spriteFrameCache.add(url, spriteFrame);\r\n                resolve(spriteFrame);\r\n            } else {\r\n                reject();\r\n            }\r\n        }\r\n        img.src = url;\r\n    });\r\n}\r\n\r\n\r\nexport function invite() {\r\n    engine.canvas.toTempFilePath({\r\n        destWidth: 500,\r\n        destHeight: 400,\r\n        success: res => {\r\n            // wx.shareAppMessage({\r\n            //     title: '5 10 K',\r\n            //     query: `roomNo=${databus.roomNo}`,\r\n            //     imageUrl: res.tempFilePath\r\n            // });\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport class SortedList<V> {\r\n    private list: V[] = [];\r\n\r\n    public constructor(private key: (arg: V) => any = a => a) {\r\n\r\n    }\r\n    public get array() {\r\n        return this.list;\r\n    }\r\n\r\n    public get(i: number) {\r\n        if (i < 0) {\r\n            i += this.list.length;\r\n        }\r\n        return this.list[i];\r\n    }\r\n\r\n\r\n    public add(elem: V) {\r\n        const idx = this.searchGreaterEqual(elem);\r\n        this.list.splice(idx, 0, elem);\r\n    }\r\n\r\n    public remove(elem: V) {\r\n        const idx = this.searchGreaterEqual(elem);\r\n        if (this.list[idx] === elem) {\r\n            this.list.splice(idx, 1);\r\n        }\r\n    }\r\n\r\n    public clear() {\r\n        this.list = [];\r\n    }\r\n\r\n    public contains(elem: V) {\r\n        const idx = this.searchGreaterEqual(elem);\r\n        return this.list[idx] === elem;\r\n    }\r\n\r\n    private searchGreaterEqual(target: V): number {\r\n        let left = 0;\r\n        let right = this.list.length;\r\n        while (left < right) {\r\n            const mid = (left + right) >> 1;\r\n            const midVal = this.key(this.list[mid]);\r\n            const targetVal = this.key(target);\r\n            if (midVal === targetVal) return mid;\r\n            if (midVal > targetVal) {\r\n                right = mid;\r\n            } else {\r\n                left = mid + 1;\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n\r\n}\r\n\r\n"]}